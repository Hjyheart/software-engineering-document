%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.1 (Build 16B2555) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1374 1060
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1374 1060
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: SYQPFA+PingFangSC-Regular
%!FontType1-1.0: AAAAAC+PingFangHK-Regular 001.003%%CreationDate: 12/27/16% Copyright 2016 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.003) readonly def/FullName (PingFangHK-Regular) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -150 def/UnderlineThickness 58 defend readonly def/FontName /AAAAAC+PingFangHK-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 1 /cid3 putdup 2 /cid13 putdup 3 /cid17 putdup 4 /cid19 putdup 5 /cid20 putdup 6 /cid66 putdup 7 /cid68 putdup 8 /cid69 putdup 9 /cid70 putdup 10 /cid71 putdup 11 /cid72 putdup 12 /cid74 putdup 13 /cid75 putdup 14 /cid76 putdup 15 /cid77 putdup 16 /cid79 putdup 17 /cid80 putdup 18 /cid81 putdup 19 /cid82 putdup 20 /cid83 putdup 21 /cid85 putdup 22 /cid86 putdup 23 /cid87 putdup 24 /cid88 putdup 25 /cid89 putdup 26 /cid90 putdup 27 /cid92 putdup 28 /cid393 putreadonly def/FontBBox {-92 -232 1146 972} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEBCD733EC3686D1BE04DD7A740E7D3C5D7A9AD72FC38F378F8E8E79BED62BAE00987484647D62338FBFD2764E4766ECDA57C8A75BA66BAF8917047038EB31B20ED0726C6B33BA9099D4F5E55335A1AB0C646BE9A014E0057560DFD3DA5C885F668F2A073CAB5CDD0904AD920C4DB457D28B33D9AC6F50AEE8BD477351CC5249ECEEC7625F8DC4B9103B3BA79C8CD2037D611ABACF689BD4844CC57B19930F8F2FC0F5C741AC8830898F69CF37542789199ACEF7FD619DCB28826B984BD440DF39D105F7AE53ABB4D95488CDC428C02D83D4E8717AEBD655174BB9A1E99991BAA588472B8CCB11F1011571915190C5FC350EA441CA4EA382AB94AE8D143AC161789EC8A7A451A776318E374578EE5C02AC4090CC983A0D9A6B080439313C1FBAADDB1126051839CCA3BBBF6336BDD934D9EDB88C1AEEA8701F7B98138D39C183C7EC3AFCAC5ED8272177610EF74244FE4DF5DF892130C39AAA13725D9B561844CB696F99E75D101DCA33B2EC1C44531E9E39B069FE27B0A3BD061F824380051DE3A84C44837F0A999A51B40C5A3F37816C0B6B44D2242463319FC6F36E42EE7DE120709EF148D05407090FCF3852F9B63A5F4FCE515C8D9AED9B92F888A24B6022735044FBECDA65F38623D0006D3DCC6A9A7288531311A44035D457837B97044FB3BEDA45C982EA744831927E8523B4DE83BF86EA5B5CD2BA10A0B8E65B4D247E7AA51DB8CCF4582A34CE6B01DC3F9034407B811156E83ABD0F8D12A9C80E6A63898EAEC97A179C398B15A38571AE2064C0679B077A3974B7059DF251FAA38145D44083E1370F5B46C06EC5FE5B99F914F37644D6CEA0059C1B4012C63FED95C14142D1A6980094713606FEC77BF74DDD5AFBAD782451F5595CD7F4829FA06286C963A5C724A9B6B3D15A93122F880073D4307212CD2F43A4134394360CDBBBAE70864FCAA56EA9F63F7D7D506968BF250FA69D55C008B7BB4B43B91D12AEB880015F11BFEA2747523AFCC27368473F900FABBB8D83D8AD2E1D1CB56568B59926CF4CD383C5895015011128E32B7A521EEE540C0586EECA384DF8164B6FD6BACCC480CAFD3DAE51C78510A007BE1CA33A47107CE603B14B10E4BF9F5FE9166C4AA0893C38BA3D58DDAAE42205370A1460CE0E381E163E8AE26EA96920706601C524B93BC7DEA7C2B3D294E8994E632B952AFD65F0A159C9EB03EE90A5C81DE8CF47C61140EEBCEF4BDABC766216C6D213EBEA18D5C45F8BB9695CC2CFD95023203484491D73D70207527005F713BF97A3406FB61FC45FB01B8CA1ADCB39447DCA84FD698E977FC2F808BD19DB164097509559A0ECC1120CC33E4E73D571100EC9AF08DA5B164787F11EDEEA0E5532449A729C6E13D31DEA91C62427C419D5F76C5C5A87D502218EECBA255C187AB89560235FC8CA665DD628D02E41334A742289E06C04E02781163278B56B67312A73CDE706B32F07C682A5E2B53393649763CB99BF9F8A4E1001B693ED92936DBE6EA4232492B7E66FBAD383A50DA3514DE725EC56F299813D9E6AE7ABD7AEE44F14028C9DFCF197FF6A6916F8CCC6D3B4AF8295DDF35F43A14742F8B76569F4035AE43A69B300AE684482A8D1AB58F5D84EB2190379CE37F04A68A275B5AE7E2AB7107259DBAEA2F04CC1167711F7176DDEEC487DE9F2DF64D775EFA11CC6DA90C15B6E990D07CCE28451BC78005CA2A77F4286DAC7F6B3A4127A98C544B15A83463A25EAD6CE8EE60989E4450499B95176E88A48F65C23514D6A56F98B22AAEA0C0A8FC0BAE1723B6F07AAFA6BA6F1699C76747873CDB788A57296296FFE48A0B7B3475013369EC9FA905D9F06CD17CBC36BD9A8793E38A6BD1CDE30D7AFDDAEFDAE699CEC02B6B090AF124D526F11D61929927A020DD6330C346366CFC34B241837C683003E93C1B9F41DEF0E9ABA0D168913B6F06784DE22E3ED5FEC74D1B5D8ADF27CA4F26A31BE2EA51D4B07C8FEF6301254C202218F7EBA250138366A8020815C2A48AEF773C1848E4FC250921FB1E90D032311859BB991C5115B7813A1DEC8814DEB1249667B27984D238D14F593A58E9297AFAF277306A8A48DF4B495E8CA74556571ED8FC0DA6D28131BE0918EB698CB66977E5192C6BD63017163C44C54F5302444EAC96A9E5A13B493EECC6A7FC631294DB4099393EBD615E022A044FB50B7FBB3E6500EA2983AE214974889482067895FCEFD1FD4631DE26F47D136352769FDF3A37B23ECE40D6B8DE5F8AD9F24F8D79D0C3BEABF329198816AECD175FA7019D2D533CF983112FFFC67C7FB3CDCBA0E220CA8287214B4EDE6BD0B3C54D71118D61C549BC91C2E15A17B551229A89458DA9D3EC5C9EDE908C6A797639B1E093C6D380F3DAB6D5DAA6A9EB92154BC6715A7B60709E21044A9C78E744950DCBDF9E79529D8887E2B3E0C82A453B52B1E10A218AFC368148B7DBDA6977822664F9F9E3745076F2F9B85E2A78D480D1D99EA9E0C515612A56D31BB264B66E48986E25DCB96FED0D1A5A17F92830783BA1F5A6A025EA9E7CB2EB7D32F47EBB4D71B5E5BCAE6665E76E7911ADD77D13D0FF2408056E452EC44DC2AAA7EEEE7AE26AA8D895E0769D87277B9877395619B09246533B0284F243A091B186ED19358F22237D54FA8BD43AD6EF45DAB87D351095722E3871CBE6E7BC17CF58A1B52B176AF887F2B18DB72BDEA02655B3E21E9ED5F44683CD9215E9FB01B8D86BB17EA820B2B7A13E5B998AB65BE2E0BE72D0677A75466A50E0FF1C9A66144E619378B15FC2FF0D3F2ADCBB7D95FBEF07FD92B566089DEBB6E1A2284AC5BF06D40B53CE1C668B8439A0DAB789FAD562BE50C1D6FAC162490A0FE0F2CA1FE04542FD0326ABFA19AC6AD8067AC1E2C59FEC6D3EEB88017C0F69BC452B7043969C0583E5F1983C055C8B904B95AB82258278EC8675A9326F7FC70F153C3DDDC5A4C3EEC31D647BAADF217CD3EA5793677E2A6E43ACA4CB7CC47D6B29E0E1A424DDDD103AADAE94815CD3171151423DEE6FB5F93F8B3E634037491E9264BCA2646E56A15A0276A894795A5661D1C690523E6CA4D52406284D93F403196593031B262EBB65676F66F3C42DDE1EDBA7C417E76B1B6CD10827597C2AA050FB85796F0FCA62985A5D1C8A5A24DBD591CAE9210E62F8C3DA4CF00A5D2DA2B356CDA684132C7B7FBAA03A687A5123F14ECB238632BF5729CEA66F950300FC4E09180D5FC0BD46C9C923F887ABAB38D6B6390EAAB7C09C8EE62C3A870FB8C07080FA7B15001D83CBAE29ACDAF36F053ED46320FFF9332B3F2754E0133A643384363E85E9D49EBF52F239CB53C5598C5496497951F2F48F2369B17015D655B2695EB6DF789A9B7B93FFBA24A3D7A3D1D4D6B5CCE5B534838FE26FB83025E2AF7A057E79407DB693AD51C1D30660E2A97C13283634F4E39B3EFEEDE4E9159E1E9DB35D1017EB2459BBCB14D134024699B52EFDE46267DB4A765F61A594B21E818F266CFBBDB2779AD9314F43C17106C61A8D7DF5B0B9AE123FF86E4C96B91B6312612C5CAA70BD22B6BE6A9AACCBD54A69E3FBD7A59D4D7E1062BBBAE9C896D0562C1EE5D43F5C2D4DDE0A600D869F78D8B43E33F4145F7F97D38C0BE6D0F59486D364F796AA01C9AA89DD9B17F8F90FD9213FBEF633F46229B1AAC21F26C8630746201F48E66A7909800C7FAE6EC62712220601222E3C32F53D66970FE823C64FA7A55B61379F66A5027AAA1CB3FE5039140DBA6ADE9B93621D1EEFBBA040993D8379E24CCAE641CD28EA42F287A90299A510C3C0C5A98369A10404C46973320A7A59726B68F0EAD400BFA5C90057990025C597F780FD81308663D59E07EE875ED14A3D4F20DE5C6CF23AB1E0FF7C909BCCE9F3F06E4264DE433FC838857CEC2633967CBBBDE72281FDA1DC7374337D72430C6EA31121DE0E91D815E0B0C3529324E9C3D055FBE0CE5F21211EFAF722ED1A6161EE0EA9A45ED514BCA8138A18C15DE9501F4944E12A446418BDF2A77AED0B645020B7C6748F96016A9C632FA6415AEF3306E7440CBB503859ED5C02AA24F79F73750585C7CE4535F3C64089924DAAA953E032287D660570A82E41CA84B6EC2942CA89AA56A3622FC7F95EECAAEA312E555750DAF0EFA695AD30975B853200A849FAD94B60C99C21AD683C388F9B8C3C3637AAA45F87636794C531D11E34E2B0C5D6379189AAF12BB7FADAAF6D03C26E72A2E0F1BBD3EEA56D8CB6580F7E8A6A2A3C03A9223581DF7FF84EC1CE0F1F4F6F448FBAAD5C001E76EF325F2BA9473DE7794D4F5CAE6BFDCC6896A2382F658807B722DCEE7360BE78E73048E71F7EF5EDB341E1FCDBBF88FFEEC5DA9AE84B44F379AB337F4CCACCBBABDA6A0ED152B9BBA1594289017C4A739632B8D1FC71EFFB65DBFB82AC95FBF9FDAAE35AD0896F7155BA29EF6E3DF97065661F0FCE4C8CDA20FF035B675E1788B2F50C5E280CC65EB4D9F4EAE5CEDD6E17CFC721702EBD150C9983447898953F663DD3D2F20D76BE4C800089B6432E23A46EE66B7B1A4D8548E03459071483D3186790453DC63EB637CE58BD46B9D2183DBAE6743A99BBF36A693B4193F7135D59CDF859D3FC7D4B531033BE48361BD4FAB2D3A8F8BA34E4AB5BE86719B0DC1DB2FF2F3FC1D32DE025F4E0DFD860D7DEBC5FA6FA932A3FB39A7FD85A0C3F1E962D2E8BBBA6334AF01F07F98A6C5CC4F2DE5258021DE25BB14410828F9122E0140229AD15DB5878FE1ADD7E5DF0725ADE644EA84F12488DDA725EF52A4C565FEBCD3632B2F72D567310980406DDB0EC59A654121DA8C7D19193DE9054E2F0D7F94DF08CED81A7B2C2C7A3462FB63BE887FB42B6BC2F5ABBD5D65E749824807AFCF41B0DC3D0A552C661C079DEC7C41A2153263045F758EAA8235E7AB0CB7222736359022DB2CD31A942181D5EDCC61081C7F023DDC9C61D3E969028771448B6D008E396B27DF042879F782D3D483FB0919A561A8A0E99C6585F890FBDF51434EF6805B6D6805C590791788424A5B12508141FCD1070D170E38E4048068C8E3ACB51B64BFD61A041385D353607D34CBCE5DC353869D97C68D5EB4532B3E8F4F9C3C87E6C20F5D3AC8DC1EF00694E47833ED789503A8D3FEEBAE5B87E4BD3C343C112FE228CB538CBC77A85CD66B10C5F35FB7C5076F900F7CAB2A191926FF2BDA710FF04DEE8EA34558D0FC7A8703FD7ED16819C33D43DF1F817A5BF5E76FFF20B374350374CF799E391EE3C6177F3753B5646EDEB380C88FC1DBA6CFF3126524AE3470356FC616F17705DBD68F92E2B4649EBC0A70A6216D623826E9D8C362607ED7D90FF10F9BACFFDFEB96A7844F50FBB5F4B5FCD6FE3035D53E3710DC2E991A830259B4135EDB8901C2A82595A58CF4FD2D181CCCCECF9BDDE37487543FE190E912846BB736CC1FC3615E2A6BA5549BF390C7A0F900D1B73D03E74EBE59ABA52733A1CF854E3DA386895654C60B18DF71D1AD315C221374F93E9104AC86AC288CEAE4778C91D245C3B9C1E39408A3F61D6ED162750B8BC3BDC62E93D79A94F26491FFED510EE0495B341FF76BE3F564B52A70F550E9DF60FA618AE539E4CF7D4F789F91D8D8F98F9480BEB7C96C43E15819D952DBC179983447898DE6FFBF4ACA956D15A93D785F43C593C266BDDE2DF07E56D6741916AB5BF31223723D169FBD607A5C3EADA3B7A8A6B3D1027DAC7F507CC3C1EC628E97D0232CCFF4845DDA9BAABF4A7270A1C9D594871C8CECE96BD610EF65760F1A3B24FC7F2A8352EABE4377AE71A80F0CE64CE79D29A9BFAD5967D7576020F71E91529B15BB1C0CC447271B049D78D00EFE24561D4A1CB59A4A9EC155B1B8C592A16EE205E667E085E65A1493B4737177624435C3A705FF7C7839793B5DC351BA764E8863C75C11D454CF8C8595F96E66E1665494328835036CAE16F6B8CB741189A014680A978F28EA023F52A229F1370ED30E459E5AE95911A90A50E8A48A4CB2E186DAF5110D38BED0657F33934F902BF106A1F6BB3DDF5009698097561CFDE2ECEBDC0630FF6CE488DA55775B5EC2C66E90F7757C09C1317CE9A7DCCCC704550CA56FAFB319107FE1975329D63CA00BEA15B35760B6EB9EE09DBEC5E3679BC45B8F2B8976E82FD517AACDF85FE70C5E5783D619AB70BA08FDA28538E32E3FB051CE406C8DEF7F12C6A2DCA601D237D54E1A5B0A794C9F7EE3A81C9F84C9D93A57336F99A7172375E76A774787B31AB51E7ABBB93843E8CCAEDD75634594A8B89187B243E5C884146120A0E69EABF075D4EDD11A1C04E3EBEDDC5CCA1759AE7ABA488E8438716AF94E8F52DBDA1F055B81332206E61DF53663DED16C4EAEF2B17A5F61AE0D0ADC2FAB55693C9C837C7F69D83BE1FF72BFAA986E9F8B961934CECB704C83B30193B7255D53D7BD9A5EDC31013C687E57DC93807CCDCFC4049883C0DAB1E8780C9E80A5A95305E4A6A5B0A68E060CEB978E2BF17086A2E79A48840721C9B3A9507D2AEA55BB6E2A796F2BD3E8EC82F175C6975AA4DA71D5DB0130B8A453CA1065AFBD0A5FC7D254862A0C3AB33CF17754FA63B05B3471E2584730683DBD23B48EEE6A2DBE3F1E1A587BF8DF76D77922A11DDD6AFF3FD02A62E288FE942037F04E14F9C1650132459B9F89FAC995A71BE741659A02DCAFEDAE3468383FE449543357EE843FE9E163981C34B78744D72DED7194FF67043A3B26759DCA684827E26379F141E0C4D8803B8E7A1E81B848B6CF706F0C4C8FA5FEAC9E7F56567615FF3AEF96A1B640D05E064668B8821295EC285B7A40F8CF26875AB116C397B578A971CD346CD81298D7A51B6D9A2C07D84A5A08F4F4254B9945CAE082C29412DD0DC4FA22E44B27DCEA83CF407FE5CAFD9F336A0F1668C556405976E8ACA2FEEBA610F95243A4ACBFCB1935E06D1294F73F4AD75542A68E909EDF896911C920FAD7D4F64315D5A53CE14E71E6D7ABE804A5236C902B81D01D60CFAC6BD6FB8B66C9672610DDC255C332FD37073B1368EA8CE998528E0B058FCAEBB9EA3BFD5CEB3E16027911517AC9DE8DF64E6A2EA4621CF41EA7FB4EFB906B14CBF03C9FD9C52E7EE49204FD853B7CA707AED97751CB3CF072C3611F4E2203A37B2B3F2579D7AE81C37C9F105B1181723C54BAF38C99FFB16F6D0F8366C6C2FC8B19CD13431A7376E355A46D22CD23F9FF3FF6C447D696B680F610CFF314384F4AF901C00DFDD3D6F5C6F8E9EAEEC710C96FB64C4D22FE8F7188A89C6BDFF561999B39FD87432F71C9C990A9360998326A30D6F483BDB44ABE990D88D1019AA4B2EA6C9902BB4418AD9026CD5332C534491CB814166E426EB8B260892BA96DBD4D061545AB720C8AD3394C1969A2FBBC68C22F2C28BF1951FCC647A45763CA912131F4BDB33E25DAA647814D6681815C69AFEC67D667F0585745F960DD7A785EC1901D1BF3741AE4064FED7A794EB0EE51069C706178AB025EA88E9DF310AB8F16DB140CD73C359FC480E1FB1A54CCC3AF99ECFEB0F0D34BD883BCFBDF874608594B670300464DF32046256C09B8D79F64A6C6AE0D9970EE1C9E2FD41500F2C65D704F68D55A7292514AFF174A605ACDB7A760B3541DA4EB048E70FA2F464BA45D91C9925839136D238E8F041013EFE1FD0AF161BF89CD4C0867E22BBB7F0FA4247C3BD1AAE7A0681A28AA4D6EB57280F2B2D9DAD4DBF39FCF0765C69AD8342CE8F1136A39170B42A0B982BA31630876DE56532C1FCA04378005C27FCE911ED3A9EF4DECF11347F729F171CE7AC33BDCC5519987B30E5CFFAAAAD20CE68034B884ACCE21BF4ECECD88888C7AC3FCFE65C4DF67A96DF296D71EBDA66B0A71624D5DC734AE3AC5EEE66DD264F6C9F7B6578F51BDE08FCB5D14B4D9C6015C1EBA94C7C573F0711EF0789D80A25A4306EB72BB080926C1C73FD44C20F4FEF9B7C86E33ED915022BEBE2DA8177D46819992137F65D5C1A0AE5704C6240F542DF0F81E35975FF8F0A8B4645AC9663ECED4086A4A87C3EAED375A23C5FB00D23A259C67FBFA976D0603C06AE48FB017EA63243AA6CE95F52480EDEEB047783E11CBC5D9F27D3FB74FB249F0FE672619DC41966D6890030A615563A0F84831A92C98E09F927299ADF92A39FAA53190A6D4D8C672F27B3C5B1DFF3A347B5D97C1CAA5CFD900457DA7849EE26B44740B00E530B065BCB9C3F69E626BEA809DC1D7D8AD9CFA99863F554F571C8A520F9DAC5BFFBFFB96C68D5D67C128388E0AD3A27AD3B9051363D7BD4D1092A9A3D125275D0A1EDD3FC4B310C11E2D6F487B214BC3B3C384757EC04CB1240F4F1B96627115E34EE75F1CE4473166C84F2458637BC2E9A6A0023B00569A3C7F46618830BF0B657AD7FAEE31CCAB2A862ACB9155AB19975DFA21217AE5A58DA4B0C282028BB49C024ECE33B79B31A3AF764C82DB2E08C77C33444CFC335E955F89F15F7C116DB632EB78AAE2BFE61B777DDD825F2D4B95C58BE0CEAA7F7712BCE0ED1BC516E255F1B5E852B045EA53793938F2D00F04123B46EF0BB95415D673953737F151FCECE69A0ECDA00C5BA4F687474A6DB25129E1FABE834A3A505C2FF5C75B0D9C4676947E8CC462FEB13D569F25C80723E98359E35FC8043846A729DD3B66F62B4580CBE174D2DAC62631E6A75E2CBF25D93FDE9B0B2F86AFA951DE3037096C4BD88682C1D49704278CA2A42FAC9AD13799A8EF3567496F890109A6E9D55C9CC7CDD1A7ACA29D13819F38902283DFEBFF95723CEC82E634BB13FC7D5F7BA85025753A2E59F691A81E950DEE0AD72F24E814CC33CFB760A976A2646356F32B5BC0788181FD1AF8C2C8ADE7E6FA260B4A45EB57DDEC624CAC34F62D2FB5DF56564E68D4F2CF34F000EBAC4966F92397FE39F446F2EF33F68FB5B8CB7BA90253543675874F43CCFC8C995D60CC378D334B0C28720383E4DFBC9F66BCB983A664405B0E37D54A1ED96A32010B344CE06B1A806E9CE62CAD1732DE40CB1CD84782CDDB944EF74E89E7F27C8330C334A1102C2F473A0C56784F95EE00CD5CE7208258B49D4C5EFA917DBB2A356745C7235737D29F75032768837F1B4CB61B37C32B0DD464C97F53E23F799C039F21BAA5A18272ADC9F8D574042DC2B4FCDD6D2AC7CF32EC8F070C13CBC4FB19610BDF90847F1860779D6F399AE8BFC6BD78B31B2D9CCCFC78A770CA364CF0C74774A80BE35B14874D5EDFBC2E42A672C4C468384AD9908A1E7C92198275134DEE0125DA8ACC1EA7D808F45DE179ABB71B228DBF70AECB03EBBD3D2BA1F3435B4AB6B93147E40F3C56318D6B0AA45A09C14FADEB3D56FD7CA7FA70944C073BE6A468674E684C59B0533B6122A327242D095C5D788A86F29B4B83808F02E38D17E24AF7D828A57A2F798A400BCCA835052E6049B4F0C302B481970168F85F7A187A365641145ECBB4535F8A89E16BFBBE561351198A42D9413956273DD25E0FE9C01E17311FCCCFD347DDBF498A34A7DEF5DFDB1DAE428DEA19481BA0D763A069A4774FC362416CDF4428381C0949EE1A718958FEA72A49345F828B7A2C14270F8C025DB5FA929675DF0CE01C7E513490B17BC0418E96320A2C4496DAFC64F17DF5FF5E93E83644DA7506AF78AD0773E74B5D8E41E2AD76FB322917617233E456E39CFD525194BDD7D6C6593B8C1DD74182D47A0FD308093EF539044DB598A5A46C6C8F545BA92DA075A7895069C3CAC732E090E09A186DE50D0B853FBAC501CC34DD872469371C8F909A4E4661CE72DC1DD224CF1BC29E68D04BD733E55C604C253068AAD0BFE5A3B6DB6ADE05CBC6716104E1CD865F85697B11B7DF875CDACE6D821B2487BB81E182194CA32CC93B8BE37202A86A501F930F9FC1F649388EE5544E859C321247284C487007200C10F370058803D50839094D6851ABDCEA9CD814C0CF46BDAA1449DE28C974988048C35620866AD68FA537E03DBE67F3FBBE858D98E2AB13C7BCC687EE837E5B8DA0404F8E06B00D723CDEFFE688D74394693AB49449EC46DE82F370E8C0262E6E22FDA9E4C5C334F1E96D7747ECA0D08FA9CA32165695E316476F0363FBAF295597E9DC65F578BFE66A0E9A367CD3E9493622C5CC52070D0F7FDF703FB42B4ED942A4DA3AE8D33BC14630B069EFCBB9D8F5BB713AC5A30C1B88A0430D3AC8B82F177758C2A1B07BE3ADA07E77B80A9643541BF25D205BFB89EF770EB4477E4C573FB5113FFCA193E982B2F98122175F95801BAA885DCB3EE3075348ECF5F3001186810E51B5C86DC9B0E3B0B9F47EECDC7BD2A80C72204063C85C125428AE13980031289AD062CFDF5D9DA9A6DD57FB07948C33AB3B36A267586592927BB421DB832D75CAF95BFD95F0B2C5922DD4C2311DEBD03C195C89F8AED16A9BF1699143A822D358531AE91204142B9079F1E1B1A60B680B859CCB5A47F6EE6C001BAA446C84BF93D3398090ACF60056A5C52CE622179437CA573554E73518E2CB3EE29BEDC9314736E90C6026677B9EEFB64A9874D6D7340FE1D4D55CA8B6E372EBD077010951EE6EBDB5D2C8A4E1197D0C4B1DDB3332CEBE3C735B03BCFAA4EA57AD95F75B98BD6D3A96D8E1323FF92B97834428DAEC65B8E764931CBA7945CA2DEF6CC8A0882899B1F716FDDD0CDD3B86FACD3009E35A527EE40BE9CDE2560BCB8CF9EF69057075C9139E7FCC8BF3FEB1E9876B6313B18F33DD1B9CBDAC1EF394F0549473B1E0C6C7E34361106CC6062404CC5D2107648008FACA81BB3D3E6A15178E55D547183AF0EECC6D4A2FBA8F8725CBE2A0729BF5016A3539DAFEC45921277BD76F17EBB162D89CB8E8B1943F25FF84472ADC7B7C8FA0834F123AB362B913459033048EA9E49BDBF5AEC641D6BA767A6F37CC514F534DAAA4C1CF668A7E72B8D8CF8395153CAC273B87CF8275E7879E98DC309B9E8CB4472C20FC22F00C14901E250377D82C43C28C8F00B20BF5CB6CF580C5CB6A95EAD500EC3237E941B6EC98DD59CD2E7B83E4C180163FA5A8BC6D83F619DAD1E20027BF09265F6E4755108938CE332371E2BE142143D60BA08C05BD1C45D2C572976F595359431F17EBBCE148D02B4186F105679ECEF0C9445874BC37F33D729B1CBF85ABE1D1109EC2A219C2B97855A066FCB6A0EBA6DBACA689B186F0327F2796F0E9B15E17B1F2DAE07E040E117185DCBF71D1E138015E8657EF25913387C9F44CF6CE0AA8821FBD0C7B3D3E9DEBCBED41A85B05341242891640C4610FBB6796F0392CADC1634DDC890B4F5DF44D5A187F806B5D7311130D2E87907004FFC94BB2A2E2A4747F5790381F7D760DE16F6E90D322589B9E7C4222E208B544F43C42EFB5A7A27D55465746166150B0BC9BB7D1C5A434B99EA4E7FD7A9CBFC1D24A3EA5AE83B0957AE76EF46605FF969563DC198EB6067ADCEE1349AC7B0BE906CFD580D5A61B82052912B1E3FEB9E864903C0E503365F6FE8A1DF2709525344A38BE98382CD07F6B12287AE48E3CA2F23AD909664DAE0C7D80B2DC9B98600690D8525B39888125EF556D01846F413B336B07FD25D23952B79DEABF33D6A4AF0F54F17B74A250D591B233EA30E6F1255C6E94373EC754E0DCD3FE2A0643FD07D8F6E3727D19644FFADC68FEE155A79BEC4F876E86E041F062FA7FEB1647BB3DE26F8D517A3E7BB0B7CB2706C847833514FF09F35A347EBB376D6DB51C2B7631F37A49DD6C67A695649EFC4F42976BA165C1033D7A3E51C1C90786A8C03E0977D82B9D60DF5318FF4D1775DB393E02DDBA89F87DB0EDBD375F902D14F694AED74A278135D515804190DCA12D7A536C3DDA2531EE64261C2257AB1C4288DE1DF680EC787BBF266F204C98B8536601C1C7CF6BEF07009E8E91753175D1D46BD27DB60DC603C858CE2DDB9CD119A6F6882EFDA0383C5D785C18E08E73BD28415C00293C7F09EE123EB34ED97A2514BAB0A9CE360691B66E07E5B39512CD15C6AA201E9EFD4886FEF7DD5F47A8944C34D835DB493AECFE3172CB3805F43D03A532ADC752273C1F7681FD5F9265AACF341AA9DCC1947C1170229C942E472CBFA9F0E407BAB3E2C2A969F6B311473F125AC56ECE149CD932EDA5FF9F6F5B5E9839E598CFF8F9A2690D35D6C2187180E36AC1835CDFA322EAE2CCF67977673E03885C00E9B52C4F0F6697D55461EB0E24FB3B04CE64439A4FB7AEB28D0AD2EE0C64A30527D7CC04EF40B1690BA90ABF532C344EE1AE3664CE8F3F1B558B9CBC212ECB2BFADA937C5C6F0A8A2B88D4F0C1B1E56D2C91B6D7C4467E2BAFD6EEC494DF9AB761AAF6F4C91E68B44B4B1650F2BB840F96D444A09ED15BFCB1DC553020789E2D22E5A08E0684A1B2BB2520DC28D8789EF97975F3040A26EC0FC62029F62A17F5EBBE17E4B9F3E10CF433A1BB8358886521305C0313797A2C620966F69FED6B94C1E7D5F6E25C32C718AE406718E5979F5634617669C3242A82A9159B62C45C5FB0344EA26A36B55B4F2B4BCDE72F6E08E5C2D54AE81CD25CBF233EA518A0ED576CBFB900A242D2D7C25F79B7B112DA41B15B6DD8BC2CC04780A015F23969A91339ACCC908B972B505D61602A2892CA948E1EC5B2334A6B4CBCCE8D35B7500C7C4C204BE322A55F592C04C155046E9E2A27634D56D25A22CC5E9BAC1515623BEB2661C998768C1936523D150FBC3EDA900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%!FontType3-1.0: SYQPFA+PingFangSC-Regular19 dict dup begin/FontType 3 def/FontMatrix matrix def/FontBBox {0 0 0 0} readonly def/PaintType 0 def/StrokeWidth 0 def/BuildGlyph{save 3 1 roll1 index dupbegin/ShowProc get 3 1 roll1 index /CharProcs get exch get exec7 -1 roll execendrestore} bind def/BuildChar{1 index /Encoding get exch get1 index /BuildGlyph get exec} bind def/$SP{3 -1 roll dup /SetupSubFont get execdup setfontexch 0 0 2 index stringwidth} bind def/$SPW{4 -1 roll dup /SetupSubFont get execdup setfont3 1 roll 0 0 0 4 2 roll} bind def/$SPTW{5 -1 roll dup /SetupSubFont get execdup setfont4 1 roll neg  0 3 -1 roll 0} bind def/$RP{6 -1 roll dup /SetupSubFont get execdup setfont 5 1 rolltranslate -90 rotate 0 0 0 4 2 roll} bind def/SetupSubFont{dup /PaintType get 1 index /StrokeWidth get3 -1 roll /$SubFontArray get 4 1 roll3 index 3 index getdup /PaintType known{dup /PaintType get}{0}ifelse1 index /StrokeWidth known{1 index /StrokeWidth get}{0}ifelse3 index ne exch 4 index ne or{dup length 2 add dict begin{1 index /FID eq {pop pop}{def}ifelse}forall/StrokeWidth exch def/PaintType exch defcurrentdict enddup /CIDFontName known{/Anonymous exch /CIDFont defineresource}{/Anonymous exch definefont}ifelsedup 4 1 roll put}{ pop pop pop get}ifelse} bind def/ShowProc{systemdict /rectfill known{0 setcachelimit}if6 -1 roll dup /FontMatrix get exch /FontBBox get aload pop4 index transform 4 2 roll5 -1 roll transform 4 2 rollsetcachedevicemoveto dup type /stringtype eq {show}{glyphshow} ifelse} bind def/FontInfo 4 dict dup begin/Registry (Adobe/) def/Ordering (Identity/) def/Supplement 0 defend readonly def/FontName /SYQPFA+PingFangSC-Regular def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /cid19 putdup 34 /cid17 putdup 35 /cid13 putdup 36 /cid20 putdup 37 /cid81 putdup 38 /cid68 putdup 39 /cid80 putdup 40 /cid72 putdup 41 /cid77 putdup 42 /cid82 putdup 43 /cid85 putdup 44 /cid75 putdup 45 /cid71 putdup 46 /cid76 putdup 47 /cid74 putdup 48 /cid70 putdup 49 /cid87 putdup 50 /cid86 putdup 51 /cid88 putdup 52 /cid83 putdup 53 /cid90 putdup 54 /cid79 putdup 55 /cid69 putdup 56 /cid92 putdup 57 /cid3 putdup 58 /cid393 putdup 59 /cid89 putdup 60 /cid66 putreadonly def/$SubFontArray [/AAAAAC+PingFangHK-Regular findfont ] def/CharProcs 30 dictdup /cid0 {(\000) 0 $SP} 2 index /.notdef 2 index put putdup /cid3 {(\001) 0 $SP} putdup /cid13 {(\002) 0 $SP} putdup /cid17 {(\003) 0 $SP} putdup /cid19 {(\004) 0 $SP} putdup /cid20 {(\005) 0 $SP} putdup /cid66 {(\006) 0 $SP} putdup /cid68 {(\007) 0 $SP} putdup /cid69 {(\010) 0 $SP} putdup /cid70 {(\011) 0 $SP} putdup /cid71 {(\012) 0 $SP} putdup /cid72 {(\013) 0 $SP} putdup /cid74 {(\014) 0 $SP} putdup /cid75 {(\015) 0 $SP} putdup /cid76 {(\016) 0 $SP} putdup /cid77 {(\017) 0 $SP} putdup /cid79 {(\020) 0 $SP} putdup /cid80 {(\021) 0 $SP} putdup /cid81 {(\022) 0 $SP} putdup /cid82 {(\023) 0 $SP} putdup /cid83 {(\024) 0 $SP} putdup /cid85 {(\025) 0 $SP} putdup /cid86 {(\026) 0 $SP} putdup /cid87 {(\027) 0 $SP} putdup /cid88 {(\030) 0 $SP} putdup /cid89 {(\031) 0 $SP} putdup /cid90 {(\032) 0 $SP} putdup /cid92 {(\033) 0 $SP} putdup /cid393 {(\034) 0 $SP} put def end dup /FontName get exch definefont pop%RBIEndFontSubset
/SYQPFA+PingFangSC-Regular cguidfix
/F1.1/SYQPFA+PingFangSC-Regular renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0 sc
0.60000002 i
q
0 0 1374 1060 rc
1 0 0 -1 969 443 cm
/F1.1[ 13 0 0 -13 0 0]sf
0.37900001 14 m
(!""#)[ 7.800000 3.432000 3.432000 0.000000 ] xS
1 0 0 -1 760 443 cm
0.061500002 14 m
(!""$)[ 7.800000 3.432000 3.432000 0.000000 ] xS
1 0 0 -1 1172 432 cm
0.37900001 14 m
(!""#)[ 7.800000 3.432000 3.432000 0.000000 ] xS
1 0 0 -1 1162 888 cm
0.061500002 14 m
(!""$)[ 7.800000 3.432000 3.432000 0.000000 ] xS
1 0 0 -1 969 760 cm
0.37900001 14 m
(!""#)[ 7.800000 3.432000 3.432000 0.000000 ] xS
1 0 0 -1 760 760 cm
0.061500002 14 m
(!""$)[ 7.800000 3.432000 3.432000 0.000000 ] xS
1 0 0 -1 487.5 93 cm
0.37900001 14 m
(!""#)[ 7.800000 3.432000 3.432000 0.000000 ] xS
1 0 0 -1 166 92 cm
0.061500002 14 m
(!""$)[ 7.800000 3.432000 3.432000 0.000000 ] xS
0.061500002 14 m
(!""$)[ 7.800000 3.432000 3.432000 0.000000 ] xS
1 0 0 -1 969 617 cm
0.37900001 14 m
(!""#)[ 7.800000 3.432000 3.432000 0.000000 ] xS
1 0 0 -1 165 603 cm
0.37900001 14 m
(!""#)[ 7.800000 3.432000 3.432000 0.000000 ] xS
1 0 0 -1 760 616 cm
0.061500002 14 m
(!""$)[ 7.800000 3.432000 3.432000 0.000000 ] xS
1 0 0 -1 571 598 cm
0.37900001 14 m
(!""#)[ 7.800000 3.432000 3.432000 0.000000 ] xS
Q
2 w
/Cs2 SC
0 0 0 sc
q
0 694.99518 m
0 704.38666 7.6098113 712 16.992533 712 c
145.00746 712 l
154.39218 712 162 704.3844 162 694.99518 c
162 453.00485 l
162 443.61334 154.39018 436 145.00746 436 c
16.992533 436 l
7.6078157 436 0 443.61557 0 453.00485 c
0 694.99518 l
h
W*
0 0 1374 1060 rc
1 0 0 -1 0 712 cm
0 17.00485 m
0 7.6133308 7.6098113 0 16.992533 0 c
145.00746 0 l
154.39218 0 162 7.615581 162 17.00485 c
162 258.99515 l
162 268.38666 154.39018 276 145.00746 276 c
16.992533 276 l
7.6078157 276 0 268.38443 0 258.99515 c
0 17.00485 l
h
S
Q
/Cs1 SC
0 sc
q
0 0 1374 1060 rc
1 0 0 -1 64 516 cm
/F1.1[ 13 0 0 -13 0 0]sf
0.068000004 14 m
(%&'\()[ 7.267000 7.267000 11.115000 0.000000 ] xS
1 0 0 -1 63 545 cm
0.39199999 14 m
('&\)*+)[ 11.115000 7.267000 3.471000 7.618000 0.000000 ] xS
1 0 0 -1 57 574 cm
0.197 14 m
(,\(&-.%/)[ 7.228000 7.215000 7.267000 7.618000 3.328000 7.267000 0.000000 ] xS
1 0 0 -1 63 603 cm
0.236 14 m
(/+&-\()[ 7.683000 4.745000 7.267000 7.618000 0.000000 ] xS
1 0 0 -1 58 632 cm
0.198 14 m
(0*%1&01)[ 7.111000 7.618000 7.267000 4.615000 7.267000 7.111000 0.000000 ] xS
2 J
/Cs2 SC
0 0 0 sc
1 0 0 -1 2 674 cm
0.5 1 m
156.5 1 l
S
/Cs1 SC
0 sc
1 0 0 -1 55 703 cm
/F1.1[ 14 0 0 -14 0 0]sf
1.675 15 m
(213-\(%1)[ 7.070000 4.970000 7.840000 8.204000 7.770000 7.826000 0.000000 ] xS
1 0 0 -1 68 664 cm
/F1.1[ 13 0 0 -13 0 0]sf
7.027 14 m
(.-)[ 3.328000 0.000000 ] xS
1 w
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
1 0 0 -1 71 646 cm
0.5 1.5 m
22.5 1.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 50 487 cm
0.094499998 14 m
(4&225*+-)[ 7.618000 7.267000 6.565000 6.565000 9.815000 7.618000 4.745000 0.000000 ] xS
Q
/Cs2 SC
0 0 0 sc
q
2 282.99756 m
2 292.38776 9.6098118 300 18.992533 300 c
147.00746 300 l
156.39218 300 164 292.39645 164 282.99756 c
164 17.002447 l
164 7.6122551 156.39018 0 147.00746 0 c
18.992533 0 l
9.6078157 0 2 7.6035419 2 17.002447 c
2 282.99756 l
h
W*
0 0 1374 1060 rc
1 0 0 -1 2 300 cm
0 17.002447 m
0 7.6122551 7.6098113 0 16.992533 0 c
145.00746 0 l
154.39218 0 162 7.6035419 162 17.002447 c
162 282.99756 l
162 292.38776 154.39018 300 145.00746 300 c
16.992533 300 l
7.6078157 300 0 292.39645 0 282.99756 c
0 17.002447 l
h
S
Q
/Cs1 SC
0 sc
q
0 0 1374 1060 rc
1 0 0 -1 65.5 104 cm
/F1.1[ 13 0 0 -13 0 0]sf
0.25600001 14 m
(\(1.'\()[ 7.215000 4.615000 3.328000 11.115000 0.000000 ] xS
1 0 0 -1 66 133 cm
0.081 14 m
(21.'\()[ 6.565000 4.615000 3.328000 11.115000 0.000000 ] xS
1 0 0 -1 49 162 cm
0.486 14 m
(-\(20+.41.*%)[ 7.618000 7.215000 6.565000 7.111000 4.745000 3.328000 7.618000 4.615000 3.328000 7.618000 0.000000 ] xS
1 0 0 -1 64 191 cm
0.495 14 m
(0637.-)[ 7.111000 3.055000 7.280000 7.618000 3.328000 0.000000 ] xS
1 0 0 -1 62.5 220 cm
0.031500001 14 m
(&00\(41)[ 7.267000 7.111000 7.111000 7.215000 7.618000 0.000000 ] xS
2 J
/Cs2 SC
0 0 0 sc
1 0 0 -1 4 262 cm
0.5 1 m
156.5 1 l
S
/Cs1 SC
0 sc
1 0 0 -1 57 291 cm
/F1.1[ 14 0 0 -14 0 0]sf
8.7659998 15 m
(&4468)[ 7.826000 8.204000 8.204000 3.290000 0.000000 ] xS
1 0 0 -1 70 252 cm
/F1.1[ 13 0 0 -13 0 0]sf
7.027 14 m
(.-)[ 3.328000 0.000000 ] xS
1 w
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
1 0 0 -1 73 234 cm
0.5 1.5 m
22.5 1.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 57 75 cm
0.0605 14 m
(6*0&1.*%)[ 3.055000 7.618000 7.111000 7.267000 4.615000 3.328000 7.618000 0.000000 ] xS
11.052 50 m
(184\()[ 4.615000 6.448000 7.618000 0.000000 ] xS
Q
/Cs2 SC
0 0 0 sc
q
597 733.00983 m
597 742.39325 604.6098 750 613.99255 750 c
742.00745 750 l
751.39221 750 759 742.38654 759 733.00983 c
759 387.99017 l
759 378.60675 751.3902 371 742.00745 371 c
613.99255 371 l
604.60779 371 597 378.61343 597 387.99017 c
597 733.00983 l
h
W*
0 0 1374 1060 rc
1 0 0 -1 597 750 cm
0 16.990168 m
0 7.6067576 7.6098113 0 16.992533 0 c
145.00746 0 l
154.39218 0 162 7.6134353 162 16.990168 c
162 362.00983 l
162 371.39325 154.39018 379 145.00746 379 c
16.992533 379 l
7.6078157 379 0 371.38657 0 362.00983 c
0 16.990168 l
h
S
Q
2 J
q
0 0 1374 1060 rc
1 0 0 -1 600 712 cm
0.5 1 m
156.5 1 l
S
/Cs1 SC
0 sc
1 0 0 -1 652 741 cm
/F1.1[ 14 0 0 -14 0 0]sf
12.504 15 m
(0637)[ 7.658000 3.290000 7.840000 0.000000 ] xS
1 0 0 -1 666 702 cm
/F1.1[ 13 0 0 -13 0 0]sf
7.027 14 m
(.-)[ 3.328000 0.000000 ] xS
1 w
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
1 0 0 -1 667 684 cm
0.5 1.5 m
22.5 1.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 647 662 cm
11.146 14 m
(0*%1\(%1)[ 7.111000 7.618000 7.267000 4.615000 7.215000 7.267000 0.000000 ] xS
0.486 50 m
(-\(20+.41.*%)[ 7.618000 7.215000 6.565000 7.111000 4.745000 3.328000 7.618000 4.615000 3.328000 7.618000 0.000000 ] xS
15.397 86 m
(.'/3+6)[ 3.328000 11.115000 7.683000 7.280000 4.745000 0.000000 ] xS
10.0605 122 m
(6*0&1.*%)[ 3.055000 7.618000 7.111000 7.267000 4.615000 3.328000 7.618000 0.000000 ] xS
17.568001 158 m
(%&'\()[ 7.267000 7.267000 11.115000 0.000000 ] xS
6.4464998 194 m
('\('%3')[ 11.115000 7.215000 11.115000 7.267000 7.280000 0.000000 ] xS
18.8615 230 m
(21&1\()[ 6.565000 4.615000 7.267000 4.615000 0.000000 ] xS
20.863501 266 m
(1.'\()[ 4.615000 3.328000 11.115000 0.000000 ] xS
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
1 0 0 -1 312 624 cm
0.5 52.5 m
65.5 0.5 l
S
1 0 0 -1 378 625 cm
0.5 0.5 m
71.5 50.5 l
S
1 0 0 -1 383 573 cm
0.5 50.5 m
66.5 0.5 l
S
1 0 0 -1 312 573 cm
0.5 0.5 m
70.5 49.5 l
S
1 0 0 -1 165 574 cm
146.5 1.5 m
0.5 1.5 l
S
1 0 0 -1 450 577 cm
146.5 1.5 m
0.5 1.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 352 584 cm
0.46149999 14 m
(\)*.%90637)[ 3.471000 7.618000 3.328000 7.267000 4.329000 7.111000 3.055000 7.280000 0.000000 ] xS
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
1 0 0 -1 819 781 cm
0.5 52.5 m
65.5 0.5 l
S
1 0 0 -1 885 782 cm
0.5 0.5 m
71.5 50.5 l
S
1 0 0 -1 890 730 cm
0.5 50.5 m
66.5 0.5 l
S
1 0 0 -1 819 730 cm
0.5 0.5 m
70.5 49.5 l
S
Q
0 J
q
1002 637.00848 m
1002 646.39264 1009.6098 654 1018.9926 654 c
1147.0074 654 l
1156.3922 654 1164 646.38245 1164 637.00848 c
1164 519.99152 l
1164 510.60736 1156.3901 503 1147.0074 503 c
1018.9926 503 l
1009.6078 503 1002 510.61755 1002 519.99152 c
1002 637.00848 l
h
W*
0 0 1374 1060 rc
1 0 0 -1 1002 654 cm
0 16.991547 m
0 7.6073742 7.6098113 0 16.992533 0 c
145.00746 0 l
154.39218 0 162 7.6175647 162 16.991547 c
162 134.00845 l
162 143.39262 154.39018 151 145.00746 151 c
16.992533 151 l
7.6078157 151 0 143.38243 0 134.00845 c
0 16.991547 l
h
S
Q
/Cs1 SC
0 sc
q
0 0 1374 1060 rc
1 0 0 -1 1068 609 cm
/F1.1[ 13 0 0 -13 0 0]sf
7.027 14 m
(.-)[ 3.328000 0.000000 ] xS
2 J
/Cs2 SC
0 0 0 sc
1 0 0 -1 1002 621 cm
0.5 2 m
161 2 l
S
/Cs1 SC
0 sc
1 0 0 -1 1055 649 cm
/F1.1[ 14 0 0 -14 0 0]sf
2.7179999 15 m
(0637:6\()[ 7.658000 3.290000 7.840000 8.204000 8.512000 3.290000 0.000000 ] xS
1 w
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
1 0 0 -1 1072 590 cm
0.5 1.5 m
22.5 1.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 1068 587 cm
0.30399999 15 m
(%&'\()[ 7.826000 7.826000 11.970000 0.000000 ] xS
9.8800001 55 m
(3+6)[ 7.840000 5.110000 0.000000 ] xS
Q
/Cs2 SC
0 0 0 sc
q
529 134.00845 m
529 143.39262 536.6098 151 545.99255 151 c
674.00745 151 l
683.39221 151 691 143.38243 691 134.00845 c
691 16.991547 l
691 7.6073742 683.3902 0 674.00745 0 c
545.99255 0 l
536.60779 0 529 7.6175647 529 16.991547 c
529 134.00845 l
h
W*
0 0 1374 1060 rc
1 0 0 -1 529 151 cm
0 16.991547 m
0 7.6073742 7.6098113 0 16.992533 0 c
145.00746 0 l
154.39218 0 162 7.6175647 162 16.991547 c
162 134.00845 l
162 143.39262 154.39018 151 145.00746 151 c
16.992533 151 l
7.6078157 151 0 143.38243 0 134.00845 c
0 16.991547 l
h
S
Q
/Cs1 SC
0 sc
q
0 0 1374 1060 rc
1 0 0 -1 595 106 cm
/F1.1[ 13 0 0 -13 0 0]sf
7.027 14 m
(.-)[ 3.328000 0.000000 ] xS
2 J
/Cs2 SC
0 0 0 sc
1 0 0 -1 529 118 cm
0.5 2 m
161 2 l
S
/Cs1 SC
0 sc
1 0 0 -1 582 146 cm
/F1.1[ 14 0 0 -14 0 0]sf
1.556 15 m
(1\(&0,\(+)[ 4.970000 7.770000 7.826000 7.658000 7.784000 7.770000 0.000000 ] xS
1 w
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
1 0 0 -1 599 87 cm
0.5 1.5 m
22.5 1.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 588 84 cm
0.44400001 15 m
(0*%1&01)[ 7.658000 8.204000 7.826000 4.970000 7.826000 7.658000 0.000000 ] xS
7.3039999 55 m
(%&'\()[ 7.826000 7.826000 11.970000 0.000000 ] xS
Q
/Cs2 SC
0 0 0 sc
q
1002 452.00983 m
1002 461.39325 1009.6098 469 1018.9926 469 c
1147.0074 469 l
1156.3922 469 1164 461.38657 1164 452.00983 c
1164 106.99017 l
1164 97.606758 1156.3901 90 1147.0074 90 c
1018.9926 90 l
1009.6078 90 1002 97.613434 1002 106.99017 c
1002 452.00983 l
h
W*
0 0 1374 1060 rc
1 0 0 -1 1002 469 cm
0 16.990168 m
0 7.6067576 7.6098113 0 16.992533 0 c
145.00746 0 l
154.39218 0 162 7.6134353 162 16.990168 c
162 362.00983 l
162 371.39325 154.39018 379 145.00746 379 c
16.992533 379 l
7.6078157 379 0 371.38657 0 362.00983 c
0 16.990168 l
h
S
Q
/Cs1 SC
0 sc
q
0 0 1374 1060 rc
1 0 0 -1 1068 424 cm
/F1.1[ 13 0 0 -13 0 0]sf
7.027 14 m
(.-)[ 3.328000 0.000000 ] xS
2 J
/Cs2 SC
0 0 0 sc
1 0 0 -1 1002 436 cm
0.5 2 m
161 2 l
S
/Cs1 SC
0 sc
1 0 0 -1 1055 464 cm
/F1.1[ 14 0 0 -14 0 0]sf
3.816 15 m
(0*''\(%1)[ 7.658000 8.204000 11.970000 11.970000 7.770000 7.826000 0.000000 ] xS
1 w
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
1 0 0 -1 1072 405 cm
0.5 1.5 m
22.5 1.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 1053 402 cm
8.8879995 15 m
(0*%1\(%1)[ 7.658000 8.204000 7.826000 4.970000 7.770000 7.826000 0.000000 ] xS
19.115 55 m
(-&1\()[ 8.204000 7.826000 4.970000 0.000000 ] xS
3.2809999 95 m
(213-\(%1.-)[ 7.070000 4.970000 7.840000 8.204000 7.770000 7.826000 4.970000 3.584000 0.000000 ] xS
8.1459999 135 m
(1&+/\(1.-)[ 4.970000 7.826000 5.110000 8.274000 7.770000 4.970000 3.584000 0.000000 ] xS
0.096000001 175 m
(1&+/\(1184\()[ 4.970000 7.826000 5.110000 8.274000 7.770000 4.970000 4.970000 6.944000 8.204000 0.000000 ] xS
13.76 215 m
(*5%\(+)[ 8.204000 10.570000 7.826000 7.770000 0.000000 ] xS
0.96399999 255 m
(&01.;.18<.-)[ 7.826000 7.658000 4.970000 3.584000 6.748000 3.584000 4.970000 6.944000 7.000000 3.584000 0.000000 ] xS
10.61 295 m
(0637<.-)[ 7.658000 3.290000 7.840000 8.204000 7.000000 3.584000 0.000000 ] xS
Q
/Cs2 SC
0 0 0 sc
q
1000 1043.0099 m
1000 1052.3932 1007.6098 1060 1016.9926 1060 c
1145.0074 1060 l
1154.3922 1060 1162 1052.3866 1162 1043.0099 c
1162 697.99017 l
1162 688.60675 1154.3901 681 1145.0074 681 c
1016.9926 681 l
1007.6078 681 1000 688.61346 1000 697.99017 c
1000 1043.0099 l
h
W*
0 0 1374 1060 rc
1 0 0 -1 1000 1060 cm
0 16.990168 m
0 7.6067576 7.6098113 0 16.992533 0 c
145.00746 0 l
154.39218 0 162 7.6134353 162 16.990168 c
162 362.00983 l
162 371.39325 154.39018 379 145.00746 379 c
16.992533 379 l
7.6078157 379 0 371.38657 0 362.00983 c
0 16.990168 l
h
S
Q
/Cs1 SC
0 sc
q
0 0 1374 1060 rc
1 0 0 -1 1066 1015 cm
/F1.1[ 13 0 0 -13 0 0]sf
7.027 14 m
(.-)[ 3.328000 0.000000 ] xS
2 J
/Cs2 SC
0 0 0 sc
1 0 0 -1 1000 1027 cm
0.5 2 m
161 2 l
S
/Cs1 SC
0 sc
1 0 0 -1 1053 1055 cm
/F1.1[ 14 0 0 -14 0 0]sf
10.858 15 m
(&01.;.18)[ 7.826000 7.658000 4.970000 3.584000 6.748000 3.584000 4.970000 0.000000 ] xS
1 w
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
1 0 0 -1 1070 996 cm
0.5 1.5 m
22.5 1.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 1048 993 cm
11.944 15 m
(0*%1&01)[ 7.658000 8.204000 7.826000 4.970000 7.826000 7.658000 0.000000 ] xS
0.40799999 55 m
(-\(20+.41.*%)[ 8.204000 7.770000 7.070000 7.658000 5.110000 3.584000 8.204000 4.970000 3.584000 8.204000 0.000000 ] xS
16.466 95 m
(.'/3+6)[ 3.584000 11.970000 8.274000 7.840000 5.110000 0.000000 ] xS
10.719 135 m
(6*0&1.*%)[ 3.290000 8.204000 7.658000 7.826000 4.970000 3.584000 8.204000 0.000000 ] xS
18.804001 175 m
(%&'\()[ 7.826000 7.826000 11.970000 0.000000 ] xS
6.8270001 215 m
('\('%3')[ 11.970000 7.770000 11.970000 7.826000 7.840000 0.000000 ] xS
20.197001 255 m
(21&1\()[ 7.070000 4.970000 7.826000 4.970000 0.000000 ] xS
22.353001 295 m
(1.'\()[ 4.970000 3.584000 11.970000 0.000000 ] xS
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
1 0 0 -1 960 733 cm
39.5 1.5 m
0.5 1.5 l
S
39.5 1.5 m
0.5 1.5 l
S
1 0 0 -1 760 731 cm
62.5 1.5 m
0.5 1.5 l
S
62.5 1.5 m
0.5 1.5 l
0.5 1.5 m
11.3 4.5 l
11.3 -1.5 l
0.5 1.5 l
h
0.5 1.5 m
S
1 0 0 -1 760 587 cm
62.5 1.5 m
0.5 1.5 l
S
62.5 1.5 m
0.5 1.5 l
0.5 1.5 m
11.3 4.5 l
11.3 -1.5 l
0.5 1.5 l
h
0.5 1.5 m
S
1 0 0 -1 819 637 cm
0.5 52.5 m
65.5 0.5 l
S
1 0 0 -1 885 638 cm
0.5 0.5 m
71.5 50.5 l
S
1 0 0 -1 890 586 cm
0.5 50.5 m
66.5 0.5 l
S
1 0 0 -1 819 586 cm
0.5 0.5 m
70.5 49.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 864.5 597 cm
/F1.1[ 13 0 0 -13 0 0]sf
0.27200001 14 m
(346*&-)[ 7.280000 7.618000 3.055000 7.618000 7.267000 0.000000 ] xS
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
1 0 0 -1 960 588 cm
39.5 1.5 m
0.5 1.5 l
S
1 0 0 -1 687 371 cm
1.5 122.5 m
1.5 0.5 l
S
1.5 122.5 m
1.5 0.5 l
1.5 0.5 m
-1.5 11.3 l
4.5 11.3 l
1.5 0.5 l
h
1.5 0.5 m
S
1 0 0 -1 298 302 cm
0.5 52.5 m
65.5 0.5 l
S
1 0 0 -1 364 303 cm
0.5 0.5 m
71.5 50.5 l
S
1 0 0 -1 369 251 cm
0.5 50.5 m
66.5 0.5 l
S
1 0 0 -1 298 251 cm
0.5 0.5 m
70.5 49.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 327 262 cm
0.2485 14 m
(0+\(&1\(9&4468)[ 7.111000 4.745000 7.215000 7.267000 4.615000 7.215000 4.329000 7.267000 7.618000 7.618000 3.055000 0.000000 ] xS
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
1 0 0 -1 159 251 cm
138.5 1.5 m
0.5 1.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 865.5 738 cm
0.41600001 14 m
(0+\(&1\()[ 7.111000 4.745000 7.215000 7.267000 4.615000 0.000000 ] xS
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
1 0 0 -1 819 463 cm
0.5 52.5 m
65.5 0.5 l
S
1 0 0 -1 885 464 cm
0.5 0.5 m
71.5 50.5 l
S
1 0 0 -1 890 412 cm
0.5 50.5 m
66.5 0.5 l
S
1 0 0 -1 819 412 cm
0.5 0.5 m
70.5 49.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 856 423 cm
0.472 14 m
(0*''\(%1)[ 7.111000 7.618000 11.115000 11.115000 7.215000 7.267000 0.000000 ] xS
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
1 0 0 -1 960 414 cm
39.5 1.5 m
0.5 1.5 l
S
1 0 0 -1 757 414 cm
62.5 1.5 m
0.5 1.5 l
S
62.5 1.5 m
0.5 1.5 l
0.5 1.5 m
11.3 4.5 l
11.3 -1.5 l
0.5 1.5 l
h
0.5 1.5 m
S
1 0 0 -1 1235 460 cm
0.5 52.5 m
65.5 0.5 l
S
1 0 0 -1 1301 461 cm
0.5 0.5 m
71.5 50.5 l
S
1 0 0 -1 1306 409 cm
0.5 50.5 m
66.5 0.5 l
S
1 0 0 -1 1235 409 cm
0.5 0.5 m
70.5 49.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 1272 420 cm
0.472 14 m
(0*''\(%1)[ 7.111000 7.618000 11.115000 11.115000 7.215000 7.267000 0.000000 ] xS
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
1 0 0 -1 1164 408 cm
71.5 1.5 m
0.5 1.5 l
S
1 0 0 -1 1304 857 cm
1.5 397.5 m
1.5 0.5 l
S
1 0 0 -1 1161 859 cm
142.5 1.5 m
0.5 1.5 l
S
142.5 1.5 m
0.5 1.5 l
0.5 1.5 m
11.3 4.5 l
11.3 -1.5 l
0.5 1.5 l
h
0.5 1.5 m
S
1 0 0 -1 432 251 cm
0.5 1.5 m
258.5 1.5 l
S
1 0 0 -1 301 122 cm
0.5 52.5 m
65.5 0.5 l
S
1 0 0 -1 367 123 cm
0.5 0.5 m
71.5 50.5 l
S
1 0 0 -1 372 71 cm
0.5 50.5 m
66.5 0.5 l
S
1 0 0 -1 301 71 cm
0.5 0.5 m
70.5 49.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 336.5 82 cm
0.255 14 m
(-\(&69&4468)[ 7.618000 7.215000 7.267000 3.055000 4.329000 7.267000 7.618000 7.618000 3.055000 0.000000 ] xS
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
1 0 0 -1 162 71 cm
138.5 1.5 m
0.5 1.5 l
S
1 0 0 -1 439 72 cm
0.5 1.5 m
88.5 1.5 l
S
0.5 1.5 m
88.5 1.5 l
88.5 1.5 m
77.699997 -1.5 l
77.699997 4.5 l
88.5 1.5 l
h
88.5 1.5 m
S
ep
end
